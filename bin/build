#! /usr/bin/env ruby

require 'haml'
require 'redcarpet'

class Entry
  def initialize(filename, markdown)
    @filename = filename
    @markdown = markdown
  end

  def to_html
    "<article>#{tags}</article>"
  end

  private

  def tags
    [headline, tag_list, entry_html].compact.join
  end

  def headline
    "<h1>#{@filename}</h1>"
  end

  def entry_html
    @markdown.render entry_markdown
  end

  def entry_markdown
    has_frontmatter? ? body : raw_content
  end

  def has_frontmatter?
    raw_content.match /^---$/
  end

  def raw_content
    @content ||= File.read @filename
  end

  def body
    raw_content.split(/^---$/).last
  end

  def tag_list
    return nil unless has_frontmatter?
    "<p class='tags'>#{tag_links.join(' | ')}</p>"
  end

  def tag_links
    tags.map { |tag| "<a href='#{tag}'>#{tag}</a>" }
  end

  def tags
    frontmatter.split(': ').last.chomp.split(', ')
  end

  def frontmatter
    raw_content.split(/^---$/).first
  end
end

filenames = Dir['entries/**/*.md']

template = File.read('template.haml')
haml_engine = Haml::Engine.new(template, { ugly: true })
markdown = Redcarpet::Markdown.new(Redcarpet::Render::HTML, fenced_code_blocks: true)

build_time = Time.now.strftime("%m/%d/%Y %I:%M:%S %p")
output = haml_engine.render(Object.new, { entry_count: filenames.count, build_time: build_time }) do
  filenames.map { |filename| Entry.new(filename, markdown).to_html }.join
end

File.open('output.html', 'w') do |file|
  file.puts output
end
